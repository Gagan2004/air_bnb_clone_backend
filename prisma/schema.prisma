// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   // output   = "../generated/prisma"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// // MODELS

// model User {
//   id       String @id @default(auto()) @map("_id") @db.ObjectId
//   name     String
//   email    String @unique
//   password String

//   Property Property[] @relation("prop")
//   Booking  Booking[]
//   favorites  Property[]  @relation("favorites", references: [id])

// }

// model Property {
//   id          String    @id @default(auto()) @map("_id") @db.ObjectId
//   title       String
//   description String
//   image       String
//   price       Float
//   location    String
//   userId      String    @db.ObjectId
//   user        User      @relation("prop", fields: [userId], references: [id])
//   createdAt   DateTime  @default(now())
//   Booking     Booking[]
//   favoritedBy User[]   @relation("favorites")

// }

// model Booking {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   propertyId String   @db.ObjectId
//   userId     String   @db.ObjectId
//   startDate  DateTime
//   endDate    DateTime
//   createdAt  DateTime @default(now())

//   property Property @relation(fields: [propertyId], references: [id])
//   user     User     @relation(fields: [userId], references: [id])
// }

//************************************************************

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id         String     @id @default(auto()) @map("_id") @db.ObjectId
//   name       String
//   email      String     @unique
//   password   String

//   properties Property[] @relation("prop")
//   bookings   Booking[]
//   favorites  Favorite[] // explicit relation
// }

// model Property {
//   id           String     @id @default(auto()) @map("_id") @db.ObjectId
//   title        String
//   description  String
//   image        String
//   price        Float
//   location     String
//   userId       String     @db.ObjectId
//   user         User       @relation("prop", fields: [userId], references: [id])
//   createdAt    DateTime   @default(now())

//   bookings     Booking[]
//   favoritedBy  Favorite[] // explicit relation
// }

// model Booking {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   propertyId String   @db.ObjectId
//   userId     String   @db.ObjectId
//   startDate  DateTime
//   endDate    DateTime
//   createdAt  DateTime @default(now())

//   property   Property @relation(fields: [propertyId], references: [id])
//   user       User     @relation(fields: [userId], references: [id])
// }

// model Favorite {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId     String   @db.ObjectId
//   propertyId String   @db.ObjectId

//   user       User     @relation(fields: [userId], references: [id])
//   property   Property @relation(fields: [propertyId], references: [id])

//   @@unique([userId, propertyId]) // prevents duplicate favorites
// }



/////////*************************************************************


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String     @unique
  password   String

  properties Property[] @relation("prop")
  bookings   Booking[]
  favorites  Favorite[]
  reviews    Review[]    // ✅ New: A user can write multiple reviews
}

model Property {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  // image        String
  images      String[] 
  price        Float
  location     String
  userId       String     @db.ObjectId
  user         User       @relation("prop", fields: [userId], references: [id])
  createdAt    DateTime   @default(now())

  bookings     Booking[]
  favoritedBy  Favorite[]
  reviews      Review[]   // ✅ New: A property can have multiple reviews
}

model Booking {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  propertyId String   @db.ObjectId
  userId     String   @db.ObjectId
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  status String @default("pending")


  property   Property @relation(fields: [propertyId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Favorite {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId

  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  
  userId     String   @db.ObjectId
  propertyId String   @db.ObjectId

  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])
}
